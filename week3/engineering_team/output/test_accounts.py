
{
  "code": "\nimport pytest\nfrom datetime import datetime\n\nclass UserAccount:\n    def __init__(self, user_id, username, password, email, balance=0.0):\n        self.user_id = user_id\n        self.username = username\n        self.password = password\n        self.email = email\n        self.balance = balance\n        self.holdings = {}\n        self.transactions = []\n\n    def deposit(self, amount):\n        if amount <= 0:\n            raise ValueError(\"Deposit amount must be positive.\")\n        self.balance += amount\n        self.transactions.append({\n            'transaction_type': 'deposit',\n            'amount': amount,\n            'timestamp': datetime.now().isoformat()\n        })\n\n    def withdraw(self, amount):\n        if amount <= 0:\n            raise ValueError(\"Withdrawal amount must be positive.\")\n        if self.balance < amount:\n            raise ValueError(\"Insufficient funds.\")\n        self.balance -= amount\n        self.transactions.append({\n            'transaction_type': 'withdrawal',\n            'amount': amount,\n            'timestamp': datetime.now().isoformat()\n        })\n\n    def buy_shares(self, symbol, quantity, get_share_price):\n        if quantity <= 0:\n            raise ValueError(\"Quantity must be positive.\")\n        share_price = get_share_price(symbol)\n        cost = share_price * quantity\n        if self.balance < cost:\n            raise ValueError(\"Insufficient funds to buy shares.\")\n\n        self.balance -= cost\n        if symbol in self.holdings:\n            self.holdings[symbol] += quantity\n        else:\n            self.holdings[symbol] = quantity\n        self.transactions.append({\n            'transaction_type': 'buy',\n            'symbol': symbol,\n            'quantity': quantity,\n            'price': share_price,\n            'timestamp': datetime.now().isoformat()\n        })\n\n    def sell_shares(self, symbol, quantity, get_share_price):\n        if quantity <= 0:\n            raise ValueError(\"Quantity must be positive.\")\n        if symbol not in self.holdings or self.holdings[symbol] < quantity:\n            raise ValueError(\"Insufficient shares to sell.\")\n\n        share_price = get_share_price(symbol)\n        proceeds = share_price * quantity\n        self.balance += proceeds\n        self.holdings[symbol] -= quantity\n        if self.holdings[symbol] == 0:\n            del self.holdings[symbol]\n        self.transactions.append({\n            'transaction_type': 'sell',\n            'symbol': symbol,\n            'quantity': quantity,\n            'price': share_price,\n            'timestamp': datetime.now().isoformat()\n        })\n\n    def get_portfolio_value(self, get_share_price):\n        total_value = self.balance\n        for symbol, quantity in self.holdings.items():\n            total_value += get_share_price(symbol) * quantity\n        return total_value\n\n    def get_profit_loss(self, initial_deposit):\n        return self.get_portfolio_value(get_share_price) - initial_deposit\n\n    def get_holdings(self):\n        return self.holdings\n\n    def get_transaction_history(self):\n        return self.transactions\n\n\ndef get_share_price(symbol):\n    if symbol == 'AAPL':\n        return 150.0\n    elif symbol == 'TSLA':\n        return 600.0\n    elif symbol == 'GOOGL':\n        return 2500.0\n    else:\n        return 100.0\n\n\nclass TestUserAccount:\n    @pytest.fixture\n    def account(self):\n        return UserAccount(user_id=1, username='john_doe', password='password123', email='john@example.com', balance=1000.0)\n\n    def test_deposit_success(self, account):\n        account.deposit(500.0)\n        assert account.balance == 1500.0\n\n    def test_deposit_negative(self, account):\n        with pytest.raises(ValueError) as exc:\n            account.deposit(-100)\n        assert str(exc.value) == \"Deposit amount must be positive.\"\n\n    def test_withdraw_success(self, account):\n        account.withdraw(200.0)\n        assert account.balance == 800.0\n\n    def test_withdraw_insufficient(self, account):\n        with pytest.raises(ValueError) as exc:\n            account.withdraw(1500)\n        assert str(exc.value) == \"Insufficient funds.\"\n\n    def test_buy_shares_success(self, account):\n        account.buy_shares('AAPL', 5, get_share_price)\n        assert account.holdings['AAPL'] == 5\n        assert account.balance == 750.0\n\n    def test_buy_shares_insufficient_funds(self, account):\n        with pytest.raises(ValueError) as exc:\n            account.buy_shares('AAPL', 10, get_share_price)\n        assert str(exc.value) == \"Insufficient funds to buy shares.\"\n\n    def test_sell_shares_success(self, account):\n        account.buy_shares('AAPL', 5, get_share_price)\n        account.sell_shares('AAPL', 2, get_share_price)\n        assert account.holdings['AAPL'] == 3\n        assert account.balance == 750.0 + (2 * 150.0)\n\n    def test_sell_shares_insufficient(self, account):\n        with pytest.raises(ValueError) as exc:\n            account.sell_shares('AAPL', 1, get_share_price)\n        assert str(exc.value) == \"Insufficient shares to sell.\"\n\n    def test_get_portfolio_value(self, account):\n        account.buy_shares('AAPL', 5, get_share_price)\n        assert account.get_portfolio_value(get_share_price) == 750.0 + (5 * 150.0)\n\n    def test_get_profit_loss(self, account):\n        initial_deposit = 1000.0\n        account.buy_shares('AAPL', 5, get_share_price)\n        assert account.get_profit_loss(initial_deposit) == (750.0 + (5 * 150.0)) - initial_deposit\n\n    def test_get_holdings(self, account):\n        account.buy_shares('GOOGL', 2, get_share_price)\n        assert account.get_holdings() == {'GOOGL': 2}\n\n    def test_get_transaction_history(self, account):\n        account.deposit(100.0)\n        assert len(account.get_transaction_history()) == 1\n        assert account.get_transaction_history()[0]['transaction_type'] == 'deposit'\n\n\nif __name__ == '__main__':\n    pytest.main()  # For running the tests",
  "libraries_used": ["pytest"]
}
